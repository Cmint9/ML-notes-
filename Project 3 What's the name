{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1d0578d6",
   "metadata": {},
   "source": [
    "# MTH448 Project 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50562560",
   "metadata": {},
   "source": [
    "## What's in a name?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07dba6f4",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea6794d",
   "metadata": {},
   "source": [
    "The U.S. Social Security Administration (SSA) has a large number of infant name records, which provide an excellent dataset for analyzing naming trends over time in various U.S. states. This project explores various aspects of infant name data, including: diversity, prevalence, genetic specificity, and historical trends, among many other components. We can apply natural analytic and computational methods.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "815ed549",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7566bb11",
   "metadata": {},
   "source": [
    "First, we must import two zip files: “names.zip” and “namesbystate.zip”. To access these two files, we must first import the special library. We can download the names data for everyone born in the United States from the NSA website. We can also find data for individual years or people in a data frame. We can try to create a data frame that contains all the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a9cd3531",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "448ExLec1.ipynb                      MTH448 Lecture 2.ipynb\r\n",
      "A (1).dat                            MTH448 Lecture10.ipynb\r\n",
      "\u001b[34mApplications\u001b[m\u001b[m/                        MTH448 Project 1 .ipynb\r\n",
      "BBall.csv                            MTH448 Project3.ipynb\r\n",
      "C1_W3_Lab08_Overfitting_Soln.ipynb   MTH448 lecture 11.ipynb\r\n",
      "C2_W1_Lab02_CoffeeRoasting_TF.ipynb  MTH448 lecture3 .ipynb\r\n",
      "Class 2.ipynb                        MTH448 lecture9.ipynb\r\n",
      "Class 3.ipynb                        MTH448 project2.ipynb\r\n",
      "\u001b[34mDesktop\u001b[m\u001b[m/                             MTH448Lec14.ipynb\r\n",
      "\u001b[34mDocuments\u001b[m\u001b[m/                           MTH448Lec3.ipynb\r\n",
      "\u001b[34mDownloads\u001b[m\u001b[m/                           MTH448Lec4.ipynb\r\n",
      "Dynamic 3.ipynb                      MTH448Lec5(Pro).ipynb\r\n",
      "Dynamic change 1 .ipynb              MTH448Lec5.ipynb\r\n",
      "Dynamic system 2.ipynb               MTH448Lec6.ipynb\r\n",
      "Dynamic.ipynb                        MTH448Lec7Prelim.ipynb\r\n",
      "Ex448Lec2.ipynb                      \u001b[34mMintty\u001b[m\u001b[m/\r\n",
      "\u001b[34mH-Rare-Disease-25\u001b[m\u001b[m/                   \u001b[34mMovies\u001b[m\u001b[m/\r\n",
      "\u001b[34mIdeaProjects\u001b[m\u001b[m/                        Mth 337 week4 lecture.ipynb\r\n",
      "\u001b[34mLibrary\u001b[m\u001b[m/                             Mth 448 lecture8.ipynb\r\n",
      "MTH 337 lecture week5.ipynb          Mth 448 project KNN .ipynb\r\n",
      "MTH 337 project 1.ipynb              Mth337 week 7.ipynb\r\n",
      "MTH 337 project 2.ipynb              Mth448 lecture1.ipynb\r\n",
      "MTH 337 week 3 lecture.ipynb         \u001b[34mMusic\u001b[m\u001b[m/\r\n",
      "MTH 448 lecture15 .ipynb             \u001b[34mPictures\u001b[m\u001b[m/\r\n",
      "MTH 448 lecture16.ipynb              \u001b[34mPublic\u001b[m\u001b[m/\r\n",
      "MTH 448 lecture4.ipynb               SnowTigers.jpg\r\n",
      "MTH337 Lecture 7.ipynb               Standford_Regularization_Soln.ipynb\r\n",
      "MTH337 Lecture Week 9.ipynb          Testing project 2 file .ipynb\r\n",
      "MTH337 Project 4.ipynb               \u001b[34manaconda3\u001b[m\u001b[m/\r\n",
      "MTH337 Project3.ipynb                class1.ipynb\r\n",
      "MTH337 Week 8 .ipynb                 dog.jpg\r\n",
      "MTH337 class 1.ipynb                 hackathon.ipynb\r\n",
      "MTH337 lecture 2.ipynb               jupyter_mac.command\r\n",
      "MTH337 project 3.ipynb               marathon_results.csv\r\n",
      "MTH337_Proj3_TienTran.ipynb          mnist_train.csv\r\n",
      "MTH437 Project1 .ipynb               names.zip\r\n",
      "MTH437 project2.ipynb                namesbystate.zip\r\n",
      "MTH437 project3.ipynb                output.txt\r\n",
      "MTH448 Lecture 12.ipynb              \u001b[34mscikit_learn_data\u001b[m\u001b[m/\r\n",
      "MTH448 Lecture 13.ipynb              \u001b[34mvenv\u001b[m\u001b[m/\r\n",
      "MTH448 Lecture 14.ipynb\r\n"
     ]
    }
   ],
   "source": [
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f32c5eda",
   "metadata": {},
   "source": [
    "We need to open this file named \"name\" to filiter our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "365df713",
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "file_names = glob.glob(\"Desktop/names/yob*.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "045e0f17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Desktop/names/yob2000.txt',\n",
       " 'Desktop/names/yob2014.txt',\n",
       " 'Desktop/names/yob1938.txt',\n",
       " 'Desktop/names/yob1910.txt',\n",
       " 'Desktop/names/yob1904.txt',\n",
       " 'Desktop/names/yob1905.txt',\n",
       " 'Desktop/names/yob1911.txt',\n",
       " 'Desktop/names/yob1939.txt',\n",
       " 'Desktop/names/yob2015.txt',\n",
       " 'Desktop/names/yob2001.txt',\n",
       " 'Desktop/names/yob2017.txt',\n",
       " 'Desktop/names/yob2003.txt',\n",
       " 'Desktop/names/yob1907.txt',\n",
       " 'Desktop/names/yob1913.txt',\n",
       " 'Desktop/names/yob1898.txt',\n",
       " 'Desktop/names/yob1899.txt',\n",
       " 'Desktop/names/yob1912.txt',\n",
       " 'Desktop/names/yob1906.txt',\n",
       " 'Desktop/names/yob2002.txt',\n",
       " 'Desktop/names/yob2016.txt',\n",
       " 'Desktop/names/yob2012.txt',\n",
       " 'Desktop/names/yob2006.txt',\n",
       " 'Desktop/names/yob1902.txt',\n",
       " 'Desktop/names/yob1916.txt',\n",
       " 'Desktop/names/yob1889.txt',\n",
       " 'Desktop/names/yob1888.txt',\n",
       " 'Desktop/names/yob1917.txt',\n",
       " 'Desktop/names/yob1903.txt',\n",
       " 'Desktop/names/yob2007.txt',\n",
       " 'Desktop/names/yob2013.txt',\n",
       " 'Desktop/names/yob2005.txt',\n",
       " 'Desktop/names/yob2011.txt',\n",
       " 'Desktop/names/yob1915.txt',\n",
       " 'Desktop/names/yob1901.txt',\n",
       " 'Desktop/names/yob1929.txt',\n",
       " 'Desktop/names/yob1928.txt',\n",
       " 'Desktop/names/yob1900.txt',\n",
       " 'Desktop/names/yob1914.txt',\n",
       " 'Desktop/names/yob2010.txt',\n",
       " 'Desktop/names/yob2004.txt',\n",
       " 'Desktop/names/yob1973.txt',\n",
       " 'Desktop/names/yob1967.txt',\n",
       " 'Desktop/names/yob1998.txt',\n",
       " 'Desktop/names/yob1999.txt',\n",
       " 'Desktop/names/yob1966.txt',\n",
       " 'Desktop/names/yob1972.txt',\n",
       " 'Desktop/names/yob1958.txt',\n",
       " 'Desktop/names/yob1964.txt',\n",
       " 'Desktop/names/yob1970.txt',\n",
       " 'Desktop/names/yob1971.txt',\n",
       " 'Desktop/names/yob1965.txt',\n",
       " 'Desktop/names/yob1959.txt',\n",
       " 'Desktop/names/yob1961.txt',\n",
       " 'Desktop/names/yob1975.txt',\n",
       " 'Desktop/names/yob1949.txt',\n",
       " 'Desktop/names/yob1948.txt',\n",
       " 'Desktop/names/yob1974.txt',\n",
       " 'Desktop/names/yob1960.txt',\n",
       " 'Desktop/names/yob1976.txt',\n",
       " 'Desktop/names/yob1962.txt',\n",
       " 'Desktop/names/yob1989.txt',\n",
       " 'Desktop/names/yob1988.txt',\n",
       " 'Desktop/names/yob1963.txt',\n",
       " 'Desktop/names/yob1977.txt',\n",
       " 'Desktop/names/yob1952.txt',\n",
       " 'Desktop/names/yob1946.txt',\n",
       " 'Desktop/names/yob1991.txt',\n",
       " 'Desktop/names/yob1985.txt',\n",
       " 'Desktop/names/yob1984.txt',\n",
       " 'Desktop/names/yob1990.txt',\n",
       " 'Desktop/names/yob1947.txt',\n",
       " 'Desktop/names/yob1953.txt',\n",
       " 'Desktop/names/yob1979.txt',\n",
       " 'Desktop/names/yob1945.txt',\n",
       " 'Desktop/names/yob1951.txt',\n",
       " 'Desktop/names/yob1986.txt',\n",
       " 'Desktop/names/yob1992.txt',\n",
       " 'Desktop/names/yob1993.txt',\n",
       " 'Desktop/names/yob1987.txt',\n",
       " 'Desktop/names/yob1950.txt',\n",
       " 'Desktop/names/yob1944.txt',\n",
       " 'Desktop/names/yob1978.txt',\n",
       " 'Desktop/names/yob1940.txt',\n",
       " 'Desktop/names/yob1954.txt',\n",
       " 'Desktop/names/yob1968.txt',\n",
       " 'Desktop/names/yob1983.txt',\n",
       " 'Desktop/names/yob1997.txt',\n",
       " 'Desktop/names/yob1996.txt',\n",
       " 'Desktop/names/yob1982.txt',\n",
       " 'Desktop/names/yob1969.txt',\n",
       " 'Desktop/names/yob1955.txt',\n",
       " 'Desktop/names/yob1941.txt',\n",
       " 'Desktop/names/yob1957.txt',\n",
       " 'Desktop/names/yob1943.txt',\n",
       " 'Desktop/names/yob1994.txt',\n",
       " 'Desktop/names/yob1980.txt',\n",
       " 'Desktop/names/yob1981.txt',\n",
       " 'Desktop/names/yob1995.txt',\n",
       " 'Desktop/names/yob1942.txt',\n",
       " 'Desktop/names/yob1956.txt',\n",
       " 'Desktop/names/yob2009.txt',\n",
       " 'Desktop/names/yob2021.txt',\n",
       " 'Desktop/names/yob1919.txt',\n",
       " 'Desktop/names/yob1931.txt',\n",
       " 'Desktop/names/yob1925.txt',\n",
       " 'Desktop/names/yob1886.txt',\n",
       " 'Desktop/names/yob1892.txt',\n",
       " 'Desktop/names/yob1893.txt',\n",
       " 'Desktop/names/yob1887.txt',\n",
       " 'Desktop/names/yob1924.txt',\n",
       " 'Desktop/names/yob1930.txt',\n",
       " 'Desktop/names/yob1918.txt',\n",
       " 'Desktop/names/yob2020.txt',\n",
       " 'Desktop/names/yob2008.txt',\n",
       " 'Desktop/names/yob2022.txt',\n",
       " 'Desktop/names/yob1926.txt',\n",
       " 'Desktop/names/yob1932.txt',\n",
       " 'Desktop/names/yob1891.txt',\n",
       " 'Desktop/names/yob1885.txt',\n",
       " 'Desktop/names/yob1884.txt',\n",
       " 'Desktop/names/yob1890.txt',\n",
       " 'Desktop/names/yob1933.txt',\n",
       " 'Desktop/names/yob1927.txt',\n",
       " 'Desktop/names/yob2023.txt',\n",
       " 'Desktop/names/yob1923.txt',\n",
       " 'Desktop/names/yob1937.txt',\n",
       " 'Desktop/names/yob1894.txt',\n",
       " 'Desktop/names/yob1880.txt',\n",
       " 'Desktop/names/yob1881.txt',\n",
       " 'Desktop/names/yob1895.txt',\n",
       " 'Desktop/names/yob1936.txt',\n",
       " 'Desktop/names/yob1922.txt',\n",
       " 'Desktop/names/yob2018.txt',\n",
       " 'Desktop/names/yob1934.txt',\n",
       " 'Desktop/names/yob1920.txt',\n",
       " 'Desktop/names/yob1908.txt',\n",
       " 'Desktop/names/yob1883.txt',\n",
       " 'Desktop/names/yob1897.txt',\n",
       " 'Desktop/names/yob1896.txt',\n",
       " 'Desktop/names/yob1882.txt',\n",
       " 'Desktop/names/yob1909.txt',\n",
       " 'Desktop/names/yob1921.txt',\n",
       " 'Desktop/names/yob1935.txt',\n",
       " 'Desktop/names/yob2019.txt']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2cdd3a9",
   "metadata": {},
   "source": [
    "After reading the files, we will notice that the list of filenames is not in very good order.\n",
    "We can try to create a list first and then use a loop to iterate through all the files and try to read the csv file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8fdb449f",
   "metadata": {},
   "outputs": [],
   "source": [
    "frames = []   # Create a list\n",
    "for f in file_names:   # Loop over all the files.\n",
    "    frames.append(pd.read_csv(f,names=['Name','Sex','Count']))  #after looping, pcik \"Name, sex, count\" "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7b6a7592",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Emily</td>\n",
       "      <td>F</td>\n",
       "      <td>25959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hannah</td>\n",
       "      <td>F</td>\n",
       "      <td>23086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Madison</td>\n",
       "      <td>F</td>\n",
       "      <td>19968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ashley</td>\n",
       "      <td>F</td>\n",
       "      <td>17998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sarah</td>\n",
       "      <td>F</td>\n",
       "      <td>17713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29772</th>\n",
       "      <td>Zeph</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29773</th>\n",
       "      <td>Zeven</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29774</th>\n",
       "      <td>Ziggy</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29775</th>\n",
       "      <td>Zo</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29776</th>\n",
       "      <td>Zyier</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29777 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Name Sex  Count\n",
       "0        Emily   F  25959\n",
       "1       Hannah   F  23086\n",
       "2      Madison   F  19968\n",
       "3       Ashley   F  17998\n",
       "4        Sarah   F  17713\n",
       "...        ...  ..    ...\n",
       "29772     Zeph   M      5\n",
       "29773    Zeven   M      5\n",
       "29774    Ziggy   M      5\n",
       "29775       Zo   M      5\n",
       "29776    Zyier   M      5\n",
       "\n",
       "[29777 rows x 3 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frames[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9cfe2e2",
   "metadata": {},
   "source": [
    "After we got the list of DataFrames, we can cancatenate the list together into a single DataFrame by using \"concat\". \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "add10f11",
   "metadata": {},
   "outputs": [],
   "source": [
    "NameDataFrame = pd.concat(frames)  # use \"concate\" to concatenate the list together"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b5ca284b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Emily</td>\n",
       "      <td>F</td>\n",
       "      <td>25959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hannah</td>\n",
       "      <td>F</td>\n",
       "      <td>23086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Madison</td>\n",
       "      <td>F</td>\n",
       "      <td>19968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ashley</td>\n",
       "      <td>F</td>\n",
       "      <td>17998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sarah</td>\n",
       "      <td>F</td>\n",
       "      <td>17713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32121</th>\n",
       "      <td>Zyheem</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32122</th>\n",
       "      <td>Zykel</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32123</th>\n",
       "      <td>Zyking</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32124</th>\n",
       "      <td>Zyn</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32125</th>\n",
       "      <td>Zyran</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2117219 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Name Sex  Count\n",
       "0        Emily   F  25959\n",
       "1       Hannah   F  23086\n",
       "2      Madison   F  19968\n",
       "3       Ashley   F  17998\n",
       "4        Sarah   F  17713\n",
       "...        ...  ..    ...\n",
       "32121   Zyheem   M      5\n",
       "32122    Zykel   M      5\n",
       "32123   Zyking   M      5\n",
       "32124      Zyn   M      5\n",
       "32125    Zyran   M      5\n",
       "\n",
       "[2117219 rows x 3 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NameDataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d78acca",
   "metadata": {},
   "source": [
    "When we put all the lists side by side, we can see that the information in the name file becomes clear and regular. Once we're done organizing, we can pick the special “string” to find the information we're looking for. We can start with a simple example to understand what we need to do with “split”."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "da970e6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Hello', 'world']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tw = 'Hello.world'\n",
    "tw.split('.')    # use .split to split the whole string "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a4b7943",
   "metadata": {},
   "source": [
    "With output we can see that when we use “.” in the string, it automatically detects that the string has “.” in the string. So we can try to apply this to our file, because it's hard to capture the information you want when the query is too large, so creating a new list that loops your entire datafile can help you organize the information. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "117bb488",
   "metadata": {},
   "source": [
    "So we can create a list in the same order as the dataframe by creating a list, which can have information about the year, month, or gender. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2b785e6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "years = []   # Create a list to strore the years as same as order of file\n",
    "for f in file_names:     # Loop the file \"names\"\n",
    "    FnameList = f.split('.')     # In order to get the accurate info about years, we will use the .split()\n",
    "    year = int(FnameList[0][-4:])   # it slices the last four characters of the filename string\n",
    "    years.append(year)   # after looping, append all the years to the list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a101308a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2000,\n",
       " 2014,\n",
       " 1938,\n",
       " 1910,\n",
       " 1904,\n",
       " 1905,\n",
       " 1911,\n",
       " 1939,\n",
       " 2015,\n",
       " 2001,\n",
       " 2017,\n",
       " 2003,\n",
       " 1907,\n",
       " 1913,\n",
       " 1898,\n",
       " 1899,\n",
       " 1912,\n",
       " 1906,\n",
       " 2002,\n",
       " 2016,\n",
       " 2012,\n",
       " 2006,\n",
       " 1902,\n",
       " 1916,\n",
       " 1889,\n",
       " 1888,\n",
       " 1917,\n",
       " 1903,\n",
       " 2007,\n",
       " 2013,\n",
       " 2005,\n",
       " 2011,\n",
       " 1915,\n",
       " 1901,\n",
       " 1929,\n",
       " 1928,\n",
       " 1900,\n",
       " 1914,\n",
       " 2010,\n",
       " 2004,\n",
       " 1973,\n",
       " 1967,\n",
       " 1998,\n",
       " 1999,\n",
       " 1966,\n",
       " 1972,\n",
       " 1958,\n",
       " 1964,\n",
       " 1970,\n",
       " 1971,\n",
       " 1965,\n",
       " 1959,\n",
       " 1961,\n",
       " 1975,\n",
       " 1949,\n",
       " 1948,\n",
       " 1974,\n",
       " 1960,\n",
       " 1976,\n",
       " 1962,\n",
       " 1989,\n",
       " 1988,\n",
       " 1963,\n",
       " 1977,\n",
       " 1952,\n",
       " 1946,\n",
       " 1991,\n",
       " 1985,\n",
       " 1984,\n",
       " 1990,\n",
       " 1947,\n",
       " 1953,\n",
       " 1979,\n",
       " 1945,\n",
       " 1951,\n",
       " 1986,\n",
       " 1992,\n",
       " 1993,\n",
       " 1987,\n",
       " 1950,\n",
       " 1944,\n",
       " 1978,\n",
       " 1940,\n",
       " 1954,\n",
       " 1968,\n",
       " 1983,\n",
       " 1997,\n",
       " 1996,\n",
       " 1982,\n",
       " 1969,\n",
       " 1955,\n",
       " 1941,\n",
       " 1957,\n",
       " 1943,\n",
       " 1994,\n",
       " 1980,\n",
       " 1981,\n",
       " 1995,\n",
       " 1942,\n",
       " 1956,\n",
       " 2009,\n",
       " 2021,\n",
       " 1919,\n",
       " 1931,\n",
       " 1925,\n",
       " 1886,\n",
       " 1892,\n",
       " 1893,\n",
       " 1887,\n",
       " 1924,\n",
       " 1930,\n",
       " 1918,\n",
       " 2020,\n",
       " 2008,\n",
       " 2022,\n",
       " 1926,\n",
       " 1932,\n",
       " 1891,\n",
       " 1885,\n",
       " 1884,\n",
       " 1890,\n",
       " 1933,\n",
       " 1927,\n",
       " 2023,\n",
       " 1923,\n",
       " 1937,\n",
       " 1894,\n",
       " 1880,\n",
       " 1881,\n",
       " 1895,\n",
       " 1936,\n",
       " 1922,\n",
       " 2018,\n",
       " 1934,\n",
       " 1920,\n",
       " 1908,\n",
       " 1883,\n",
       " 1897,\n",
       " 1896,\n",
       " 1882,\n",
       " 1909,\n",
       " 1921,\n",
       " 1935,\n",
       " 2019]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "years # print out the list of years"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d21f640",
   "metadata": {},
   "source": [
    "By using the list of years, we can combine the years and data frames to get a more subjective view of the names, genders, and numbers for each year. This can help us explore the diversity of names, or the most popular names in different years, as well as what names are most used by girls and what names are most used by boys. In our report, we can look at different data to see the interesting variations in these names. We can also visualize the changes with graphs and charts. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7090dc6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "NameDataFrame = pd.concat(frames,keys=years)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "e13099da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2000</th>\n",
       "      <th>0</th>\n",
       "      <td>Emily</td>\n",
       "      <td>F</td>\n",
       "      <td>25959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hannah</td>\n",
       "      <td>F</td>\n",
       "      <td>23086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Madison</td>\n",
       "      <td>F</td>\n",
       "      <td>19968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ashley</td>\n",
       "      <td>F</td>\n",
       "      <td>17998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sarah</td>\n",
       "      <td>F</td>\n",
       "      <td>17713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2019</th>\n",
       "      <th>32121</th>\n",
       "      <td>Zyheem</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32122</th>\n",
       "      <td>Zykel</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32123</th>\n",
       "      <td>Zyking</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32124</th>\n",
       "      <td>Zyn</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32125</th>\n",
       "      <td>Zyran</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2117219 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Name Sex  Count\n",
       "2000 0        Emily   F  25959\n",
       "     1       Hannah   F  23086\n",
       "     2      Madison   F  19968\n",
       "     3       Ashley   F  17998\n",
       "     4        Sarah   F  17713\n",
       "...             ...  ..    ...\n",
       "2019 32121   Zyheem   M      5\n",
       "     32122    Zykel   M      5\n",
       "     32123   Zyking   M      5\n",
       "     32124      Zyn   M      5\n",
       "     32125    Zyran   M      5\n",
       "\n",
       "[2117219 rows x 3 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NameDataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f254d7e5",
   "metadata": {},
   "source": [
    "Secondly, we have to load the state date we can create a function to load the state \n",
    "names data from multiple files into a Dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79ebe423",
   "metadata": {},
   "source": [
    "## 1. Name Diversity over the times/Years"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdfd9ddc",
   "metadata": {},
   "source": [
    "The diversity of names is usually a reflection of the diversity of cultures, and usually many countries, especially the United States, as countries of immigration. Most groups come from countries with different backgrounds, and such diversity usually reflects different cultural histories. Often the biggest difference we can find in names is the ethnicity of the people, there is a big difference between the last names of Europe and North America and Asia and Africa. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc09c02d",
   "metadata": {},
   "source": [
    "A classic joke is that usually people in Europe can tell what country or region they are from by their face or name, but they have a hard time telling what country or region an Asian is from. It is true that we can simply tell the difference between people who live in the same culture. But what's more interesting is that, despite this, we can tell a lot of differences in the last name. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "40468a93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique Names Over Time:\n",
      " year\n",
      "1880    1889\n",
      "1881    1829\n",
      "1882    2012\n",
      "1883    1962\n",
      "1884    2158\n",
      "Name: Name, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Create a function to count the unique name\n",
    "def count_unique_names_per_year(df):\n",
    "    \n",
    "    \"\"\"Counts the number of unique names per year.\"\"\"\n",
    "    unique_names_perYear = df.groupby(\"year\")[\"Name\"].nunique()\n",
    "    print(\"Unique Names Over Time:\\n\", unique_names_per_year.head())\n",
    "    return unique_names_per_year\n",
    "\n",
    "# Call the function\n",
    "unique_names_perYear = count_unique_names_per_year(NameDataFrame)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "44c2615c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\Average Babies per Name Over Time:\n",
      " year\n",
      "1880    106.661726\n",
      "1881    105.351558\n",
      "1882    110.105865\n",
      "1883    110.573394\n",
      "1884    112.817887\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Create a function to run the avarge number of babies per name each year\n",
    "def compute_avg_babies_per_name(df):\n",
    "    # Two variables one is for totalbabies and avarge number\n",
    "    total_babies_per_year = df.groupby(\"year\")[\"Count\"].sum()\n",
    "    avg_babies_per_name = total_babies_per_year / unique_names_per_year\n",
    "    print(\"\\Average Babies per Name Over Time:\\n\", avg_babies_per_name.head())\n",
    "    return avg_babies_per_name\n",
    "\n",
    "# Call the function to see the return \n",
    "avg_babies_per_name = compute_avg_babies_per_name(NameDataFrame)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "c9e08ba0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import the library to help us to understand the plot.\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def plot_name_diversity(unique_names, avg_babies):\n",
    "    #Plots the number of unique names and average babies per name over time.\n",
    "    fig, ax1 = plt.subplots(figsize=(10, 5))\n",
    "\n",
    "    # Find for the unique name\n",
    "    ax1.set_xlabel(\"Year\")\n",
    "    ax1.set_ylabel(\"Number of Unique Names\", color=\"tab:blue\")\n",
    "    ax1.plot(unique_names, color=\"tab:blue\", label=\"Unique Names\")\n",
    "    ax1.tick_params(axis=\"y\", labelcolor=\"tab:blue\")\n",
    "\n",
    "    # Add second axis for avg babies per name\n",
    "    ax2 = ax1.twinx()\n",
    "    ax2.set_ylabel(\"Avg Babies per Name\", color=\"tab:red\")\n",
    "    ax2.plot(avg_babies, color=\"tab:red\", linestyle=\"dashed\", label=\"Avg Babies per Name\")\n",
    "    ax2.tick_params(axis=\"y\", labelcolor=\"tab:red\")\n",
    "\n",
    "    # Give the plot title and legend\n",
    "    plt.title(\"Name Diversity Over Time\")\n",
    "    fig.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# Call the function with two paramters\n",
    "plot_name_diversity(unique_names_per_year, avg_babies_per_name)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "398a3d44",
   "metadata": {},
   "source": [
    "So we can categorize as well as plot our database to see changes based on filtering by name and year. For example, in Asia, different countries have different languages and pronunciations of words, which makes the names very easy to categorize."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee6b9e66",
   "metadata": {},
   "source": [
    "## 2. Most Popular Names Over Time/ Years"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5ca5e6b",
   "metadata": {},
   "source": [
    "Exploring the most popular names has always been an interesting point as every year different states have a different name that becomes popular every year. There are even times when one of your classes may have repeat names. It's really all based on personal preference as well as parental choice. Many people prefer to choose the names that are popular today, thus producing a lot of classmates with the same first name. Others are more inclined to avoid going for the trendy, so they choose more unique names. Today in this report we get to explore the most popular names of the moment in different years."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3081758",
   "metadata": {},
   "source": [
    "Because we need to search and categorize through two databases, we have a very large database. So we can find the corresponding data through different partitions, which can help us to sort better. First we can use 'sort' function to sort."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "89b8fbb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "NameDataFrame = pd.concat(frames,keys=years)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "60b57ad2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2000</th>\n",
       "      <th>0</th>\n",
       "      <td>Emily</td>\n",
       "      <td>F</td>\n",
       "      <td>25959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hannah</td>\n",
       "      <td>F</td>\n",
       "      <td>23086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Madison</td>\n",
       "      <td>F</td>\n",
       "      <td>19968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ashley</td>\n",
       "      <td>F</td>\n",
       "      <td>17998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sarah</td>\n",
       "      <td>F</td>\n",
       "      <td>17713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">2019</th>\n",
       "      <th>32121</th>\n",
       "      <td>Zyheem</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32122</th>\n",
       "      <td>Zykel</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32123</th>\n",
       "      <td>Zyking</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32124</th>\n",
       "      <td>Zyn</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32125</th>\n",
       "      <td>Zyran</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2117219 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Name Sex  Count\n",
       "2000 0        Emily   F  25959\n",
       "     1       Hannah   F  23086\n",
       "     2      Madison   F  19968\n",
       "     3       Ashley   F  17998\n",
       "     4        Sarah   F  17713\n",
       "...             ...  ..    ...\n",
       "2019 32121   Zyheem   M      5\n",
       "     32122    Zykel   M      5\n",
       "     32123   Zyking   M      5\n",
       "     32124      Zyn   M      5\n",
       "     32125    Zyran   M      5\n",
       "\n",
       "[2117219 rows x 3 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NameDataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41ba068b",
   "metadata": {},
   "source": [
    "As you can see from our output, each year will have a corresponding name and number of people. And we're going to try to change year in the name of the file, or sorting to make it clearer that we're organizing the name file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "889c9661",
   "metadata": {},
   "outputs": [],
   "source": [
    "NameDataFrame = NameDataFrame.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1e883f42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>level_0</th>\n",
       "      <th>level_1</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000</td>\n",
       "      <td>0</td>\n",
       "      <td>Emily</td>\n",
       "      <td>F</td>\n",
       "      <td>25959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>Hannah</td>\n",
       "      <td>F</td>\n",
       "      <td>23086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2000</td>\n",
       "      <td>2</td>\n",
       "      <td>Madison</td>\n",
       "      <td>F</td>\n",
       "      <td>19968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000</td>\n",
       "      <td>3</td>\n",
       "      <td>Ashley</td>\n",
       "      <td>F</td>\n",
       "      <td>17998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000</td>\n",
       "      <td>4</td>\n",
       "      <td>Sarah</td>\n",
       "      <td>F</td>\n",
       "      <td>17713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117214</th>\n",
       "      <td>2019</td>\n",
       "      <td>32121</td>\n",
       "      <td>Zyheem</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117215</th>\n",
       "      <td>2019</td>\n",
       "      <td>32122</td>\n",
       "      <td>Zykel</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117216</th>\n",
       "      <td>2019</td>\n",
       "      <td>32123</td>\n",
       "      <td>Zyking</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117217</th>\n",
       "      <td>2019</td>\n",
       "      <td>32124</td>\n",
       "      <td>Zyn</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117218</th>\n",
       "      <td>2019</td>\n",
       "      <td>32125</td>\n",
       "      <td>Zyran</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2117219 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         level_0  level_1     Name Sex  Count\n",
       "0           2000        0    Emily   F  25959\n",
       "1           2000        1   Hannah   F  23086\n",
       "2           2000        2  Madison   F  19968\n",
       "3           2000        3   Ashley   F  17998\n",
       "4           2000        4    Sarah   F  17713\n",
       "...          ...      ...      ...  ..    ...\n",
       "2117214     2019    32121   Zyheem   M      5\n",
       "2117215     2019    32122    Zykel   M      5\n",
       "2117216     2019    32123   Zyking   M      5\n",
       "2117217     2019    32124      Zyn   M      5\n",
       "2117218     2019    32125    Zyran   M      5\n",
       "\n",
       "[2117219 rows x 5 columns]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NameDataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2f684044",
   "metadata": {},
   "outputs": [],
   "source": [
    "NameDataFrame = NameDataFrame.rename({'level_0':'year'},axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e78bc5fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>level_1</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000</td>\n",
       "      <td>0</td>\n",
       "      <td>Emily</td>\n",
       "      <td>F</td>\n",
       "      <td>25959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "      <td>Hannah</td>\n",
       "      <td>F</td>\n",
       "      <td>23086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2000</td>\n",
       "      <td>2</td>\n",
       "      <td>Madison</td>\n",
       "      <td>F</td>\n",
       "      <td>19968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000</td>\n",
       "      <td>3</td>\n",
       "      <td>Ashley</td>\n",
       "      <td>F</td>\n",
       "      <td>17998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000</td>\n",
       "      <td>4</td>\n",
       "      <td>Sarah</td>\n",
       "      <td>F</td>\n",
       "      <td>17713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117214</th>\n",
       "      <td>2019</td>\n",
       "      <td>32121</td>\n",
       "      <td>Zyheem</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117215</th>\n",
       "      <td>2019</td>\n",
       "      <td>32122</td>\n",
       "      <td>Zykel</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117216</th>\n",
       "      <td>2019</td>\n",
       "      <td>32123</td>\n",
       "      <td>Zyking</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117217</th>\n",
       "      <td>2019</td>\n",
       "      <td>32124</td>\n",
       "      <td>Zyn</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2117218</th>\n",
       "      <td>2019</td>\n",
       "      <td>32125</td>\n",
       "      <td>Zyran</td>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2117219 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         year  level_1     Name Sex  Count\n",
       "0        2000        0    Emily   F  25959\n",
       "1        2000        1   Hannah   F  23086\n",
       "2        2000        2  Madison   F  19968\n",
       "3        2000        3   Ashley   F  17998\n",
       "4        2000        4    Sarah   F  17713\n",
       "...       ...      ...      ...  ..    ...\n",
       "2117214  2019    32121   Zyheem   M      5\n",
       "2117215  2019    32122    Zykel   M      5\n",
       "2117216  2019    32123   Zyking   M      5\n",
       "2117217  2019    32124      Zyn   M      5\n",
       "2117218  2019    32125    Zyran   M      5\n",
       "\n",
       "[2117219 rows x 5 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NameDataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "e7ca8ab7",
   "metadata": {},
   "outputs": [],
   "source": [
    "NameDataFrame = NameDataFrame.sort_values(by=['year','Count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d78a419d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>level_1</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1968649</th>\n",
       "      <td>1880</td>\n",
       "      <td>835</td>\n",
       "      <td>Adelle</td>\n",
       "      <td>F</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968650</th>\n",
       "      <td>1880</td>\n",
       "      <td>836</td>\n",
       "      <td>Adina</td>\n",
       "      <td>F</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968651</th>\n",
       "      <td>1880</td>\n",
       "      <td>837</td>\n",
       "      <td>Adrienne</td>\n",
       "      <td>F</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968652</th>\n",
       "      <td>1880</td>\n",
       "      <td>838</td>\n",
       "      <td>Albertine</td>\n",
       "      <td>F</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968653</th>\n",
       "      <td>1880</td>\n",
       "      <td>839</td>\n",
       "      <td>Alys</td>\n",
       "      <td>F</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1913599</th>\n",
       "      <td>2023</td>\n",
       "      <td>1</td>\n",
       "      <td>Emma</td>\n",
       "      <td>F</td>\n",
       "      <td>13527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1931133</th>\n",
       "      <td>2023</td>\n",
       "      <td>17535</td>\n",
       "      <td>Oliver</td>\n",
       "      <td>M</td>\n",
       "      <td>14741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1913598</th>\n",
       "      <td>2023</td>\n",
       "      <td>0</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>15270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1931132</th>\n",
       "      <td>2023</td>\n",
       "      <td>17534</td>\n",
       "      <td>Noah</td>\n",
       "      <td>M</td>\n",
       "      <td>18995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1931131</th>\n",
       "      <td>2023</td>\n",
       "      <td>17533</td>\n",
       "      <td>Liam</td>\n",
       "      <td>M</td>\n",
       "      <td>20802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2117219 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         year  level_1       Name Sex  Count\n",
       "1968649  1880      835     Adelle   F      5\n",
       "1968650  1880      836      Adina   F      5\n",
       "1968651  1880      837   Adrienne   F      5\n",
       "1968652  1880      838  Albertine   F      5\n",
       "1968653  1880      839       Alys   F      5\n",
       "...       ...      ...        ...  ..    ...\n",
       "1913599  2023        1       Emma   F  13527\n",
       "1931133  2023    17535     Oliver   M  14741\n",
       "1913598  2023        0     Olivia   F  15270\n",
       "1931132  2023    17534       Noah   M  18995\n",
       "1931131  2023    17533       Liam   M  20802\n",
       "\n",
       "[2117219 rows x 5 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NameDataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "100c3e82",
   "metadata": {},
   "source": [
    "## 3. Sex Specificity of Names"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "243a4304",
   "metadata": {},
   "source": [
    "Gender specificity can also be distinguished by name. Many times when we see a person's name we probably have nearly an 80% chance of recognizing whether the name is a girl or a boy. Even though there are times when the names of boys and girls are confused, it is still a minority. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d11eff",
   "metadata": {},
   "source": [
    "Hence, we can pick what we compute a dataframe that lists the number of femal babies names\" olivia\" for each year. We also can choose the different years to observe the name chages in differnt years. For example, we can observe the 2003 and 2007 year."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24b3d332",
   "metadata": {},
   "source": [
    "If we want to identify the special gender and year, the best way is we use \"groupby\". It is pretty helpful for us to filter the data from the big file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3a711b37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>level_1</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1880</th>\n",
       "      <td>234</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1881</th>\n",
       "      <td>214</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1882</th>\n",
       "      <td>239</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1883</th>\n",
       "      <td>267</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1884</th>\n",
       "      <td>266</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019</th>\n",
       "      <td>0</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>18561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020</th>\n",
       "      <td>0</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>17677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021</th>\n",
       "      <td>0</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>17824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022</th>\n",
       "      <td>0</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>16630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023</th>\n",
       "      <td>0</td>\n",
       "      <td>Olivia</td>\n",
       "      <td>F</td>\n",
       "      <td>15270</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>144 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      level_1    Name Sex  Count\n",
       "year                            \n",
       "1880      234  Olivia   F     44\n",
       "1881      214  Olivia   F     51\n",
       "1882      239  Olivia   F     52\n",
       "1883      267  Olivia   F     46\n",
       "1884      266  Olivia   F     54\n",
       "...       ...     ...  ..    ...\n",
       "2019        0  Olivia   F  18561\n",
       "2020        0  Olivia   F  17677\n",
       "2021        0  Olivia   F  17824\n",
       "2022        0  Olivia   F  16630\n",
       "2023        0  Olivia   F  15270\n",
       "\n",
       "[144 rows x 4 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "NameSex = NameDataFrame.groupby(['Sex','Name']) # we use the groupby \"sex\" and \"name\"\n",
    "Olivias = NameSex.get_group(('F','Olivia'))     # assign the group with specifc \"F\" and \"Olivia\"\n",
    "Olivias = Olivias.set_index('year')            # assign the Olivias to two different years 2003 and 2007\n",
    "display(Olivias)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "c02a3724",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Olivias in 2003:  16152\n",
      "Olivias in 2007:  16587\n"
     ]
    }
   ],
   "source": [
    "print(\"Olivias in 2003: \",Olivias.loc[2003,'Count'])\n",
    "print(\"Olivias in 2007: \",Olivias.loc[2007,'Count'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "b89bfebc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# And we also can create a plot toshow the Olivias by year:\n",
    "plt.plot(Olivias.index,Olivias['Count'])     # create a plot to count the year and number of \"Olivia\"\n",
    "plt.title('Olivias by year')                # assign the plot title \n",
    "plt.xlabel('Year')                           # assign the x-coordinate for \"year\"\n",
    "plt.ylabel('Total Olivias born')              # assign the y-coordinate for How many Olivia born \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81e98aa3",
   "metadata": {},
   "source": [
    "Through the responses in the charts we can see that between 1880 and 1980, the usage of the name Olivia was very low. But after 1980, this name Olivia got a significant boost and even reached the peak of the name is usage during 2019-2020. We can see that in 2003, there were 16,152 girls with this name, and in 2007, there were 16,587 girls with this name. The difference between the data is also reflected in the plots compared to the middle and lower."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12754aa5",
   "metadata": {},
   "source": [
    "### 2.2 Sex Specificity and diversity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edb401c2",
   "metadata": {},
   "source": [
    "At the same time we can actually explore yo some of the names that will again be male and female. Like for example special cases of names that were once masculine/feminine and later chose to be transgender. Some of these name variations can vary greatly in gender distribution from year to year. For example, Jordan and Taylor may have been male names in the past, but as society and time change, women have also been known to use these names."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98a71534",
   "metadata": {},
   "source": [
    "So we can try to calculate the percentage change in name gender from year to year of a name, and we can use the percentage to filter out names that have changed significantly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "6ba57462",
   "metadata": {},
   "outputs": [],
   "source": [
    "gender_trend = NameDataFrame.groupby([\"Name\", \"year\", \"Sex\"])[\"Count\"].sum().unstack()\n",
    "gender_trend.fillna(0, inplace=True)\n",
    "\n",
    "gender_trend[\"total\"] = gender_trend[\"F\"] + gender_trend[\"M\"]\n",
    "gender_trend[\"male_ratio\"] = gender_trend[\"M\"] / gender_trend[\"total\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33eafdee",
   "metadata": {},
   "source": [
    "At first, we utilize \"groupby\" to filter the data by \"Name\", \"Sex\" and \"Year\".\n",
    "Then we can calculate the two total number of both gender and through the matio to get the ratio of gender trend."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "2eba1b81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender Most Changes Name:\n",
      " Name\n",
      "Altonia     0.707107\n",
      "Jazire      0.707107\n",
      "Ahanna      0.707107\n",
      "Mccarty     0.707107\n",
      "Ahari       0.707107\n",
      "Wrennyn     0.707107\n",
      "Merce       0.707107\n",
      "Rhode       0.707107\n",
      "Clellie     0.707107\n",
      "Mathison    0.707107\n",
      "Name: male_ratio, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "changing_names = gender_trend.groupby(\"Name\")[\"male_ratio\"].std().sort_values(ascending=False).head(10)\n",
    "print(\"Gender Most Changes Name:\\n\", changing_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7627338c",
   "metadata": {},
   "source": [
    "## 4. Name History "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "2608d4bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_name_trend(name, sex):\n",
    "    \"\"\"\n",
    "    Let us plots the historical trend of a given name for a specified sex.\n",
    "    two paramter the first one is be name, second one is sex\n",
    "    :param name: The name to analyze.\n",
    "    :param sex: 'M' for male, 'F' for female.\n",
    "    \"\"\"\n",
    "    name_trend = NameDataFrame[(NameDataFrame['Name'] == name) & (NameDataFrame['Sex'] == sex)]\n",
    "    \n",
    "    if name_trend.empty:\n",
    "        print(f\"No data found for {name} with sex {sex}.\")\n",
    "        return\n",
    "    \n",
    "    plt.figure(figsize=(10, 5)) # we can try to plot the size \n",
    "    plt.plot(name_trend['year'], name_trend['Count'], marker='o', linestyle='-')\n",
    "    plt.xlabel('Year')\n",
    "    plt.ylabel('Count')\n",
    "    plt.title(f'Popularity of the name \"{name}\" over time')\n",
    "    plt.grid(True)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "c12d0123",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example usage\n",
    "plot_name_trend('Emma', 'F')\n",
    "plot_name_trend('Michael', 'M')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b06671b8",
   "metadata": {},
   "source": [
    "Let's look at “Emma” and “Michael” through two different genders, and by filtering the data, we can see how the curves change. We can see if the name “Emma” is for girls, the earliest time this name has been used. We can also see the earliest usage time for the name “Michael” if it's a boy. We can visualize the number of uses of the name in different years by looking at the variation of the curve."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f3d7628",
   "metadata": {},
   "source": [
    "Of course we can also stretch to explore the history of names, such as what names can be consistently popular what names were briefly popular but then disappeared. Because there are many times when the main character in a movie or a popular novel will bring a name to fruition like Britney. But a short-lived fervor is likely to last only a short time. But there are a lot of names that can be very long-lasting and even popular for hundreds of years. You can also see these names popping up in celebrities. Whisper it, I think the names I've come across the most are “Michael” and “Peter”..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3904a066",
   "metadata": {},
   "source": [
    "Therefore, we can first get which names have the highest count number by counting the number of occurrences of each name and finding the corresponding time year. The span over which each name occurs is derived from maximum year - minimum year. Then we can filter it to find out. Which names have been around the longest, and which names were only briefly popular."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "01931d36",
   "metadata": {},
   "outputs": [],
   "source": [
    "name_lifespan = NameDataFrame.groupby(\"Name\")[\"year\"].agg([\"min\", \"max\"])  # Use “groupby\" to filter the data of year\n",
    "name_lifespan[\"lifespan\"] = name_lifespan[\"max\"] - name_lifespan[\"min\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e045493b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Then we should create two variables, one is the longest lived time, one is for the shorest lived names.\n",
    "Longest_livedNames = name_lifespan.sort_values(\"lifespan\", ascending=False).head(10)\n",
    "Shortest_livedNames = name_lifespan.sort_values(\"lifespan\", ascending=True).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "3e5d263f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Keep Popular Name:\n",
      "            min   max  lifespan\n",
      "Name                          \n",
      "Mace      1880  2023       143\n",
      "Harley    1880  2023       143\n",
      "Tilden    1880  2023       143\n",
      "Debbie    1880  2023       143\n",
      "Nick      1880  2023       143\n",
      "Gene      1880  2023       143\n",
      "Roseanna  1880  2023       143\n",
      "Tillie    1880  2023       143\n",
      "Tillman   1880  2023       143\n",
      "Louella   1880  2023       143\n",
      "Short Term Name:\n",
      "             min   max  lifespan\n",
      "Name                           \n",
      "Shaqir     2018  2018         0\n",
      "Dyanira    1993  1993         0\n",
      "Jesssica   1986  1986         0\n",
      "Jessten    1996  1996         0\n",
      "Jahmyia    2006  2006         0\n",
      "Caleob     1998  1998         0\n",
      "Starleana  1991  1991         0\n",
      "Dyego      2007  2007         0\n",
      "Starlisa   1980  1980         0\n",
      "Calet      2020  2020         0\n"
     ]
    }
   ],
   "source": [
    "print(\"Keep Popular Name:\\n\", Longest_livedNames)\n",
    "print(\"Short Term Name:\\n\", Shortest_livedNames)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e402fe8",
   "metadata": {},
   "source": [
    "By organizing we can see that some of the names have a very long existence, while at the same time they are names that I have surprisingly rarely seen before. This is a side note to show that the frequency of repetition of a name does not mean that the name has been around for a long time. Names have always been very random and creative, and some names even have special meanings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7a8ec54",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c3dbe5b3",
   "metadata": {},
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69e39827",
   "metadata": {},
   "source": [
    "In this report, we have explored the ideas of name file. We explore the name file through four different aspects：Name Diversity over the times/Years，Most Popular Names Over Time/ Years， Sex Specificity of Names and Name history.\n",
    "* Over time, the number of unique names given to babies each year has increased. Through ourplot and analysis we can observe the most popular names and the short-lived popular names each year. Many times movies as well as novels have the potential to make a name very popular. This trend could be influenced by cultureal shifts, greater global influences, and a desire of uniqueness in naming. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68a61bc4",
   "metadata": {},
   "source": [
    "* The gender diversity we can also observe leads to the same name variations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "307112dc",
   "metadata": {},
   "source": [
    "#### Future Directions:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e164189",
   "metadata": {},
   "source": [
    "  For the further studies, we could try to explor gender-specific nameing. Or how major historical evernts impact baby name choices. \n",
    "For example: wars, economic shifts.Futhermore, we also can analyzing short-lived vs popular names could provide more insights into namming cycles over generation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "526232cc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
